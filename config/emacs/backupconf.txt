;;; init.el --- Nix-based Emacs config -*- lexical-binding: t; -*-

;; --------------------------------
;; Package management
;; --------------------------------
(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure nil) ;; prevent network downloads (Nix provides pkgs)

(setq native-comp-speed 3) ;; speed up native compile if supported
;; (setq ring-bell-function 'ignore) ;; disable all bell sounds and visible bell

;; GC tuning
(setq gc-cons-threshold (* 64 1024 1024)
      gc-cons-percentage 0.2)
(add-hook 'after-init-hook
          (lambda ()
            (setq gc-cons-threshold (* 8 1024 1024)
                  gc-cons-percentage 0.1)))

;; Faster UI during startup
(setq read-process-output-max (* 3 1024 1024))
(setq idle-update-delay 1.0)



;; --------------------------------
;; UI / Fonts
;; --------------------------------
(setq default-frame-alist '((font . "JetBrainsMono Nerd Font Mono-13"))) (add-to-list 'initial-frame-alist '(font . "JetBrainsMono Nerd Font Mono-13")) (when (daemonp) (add-hook 'after-make-frame-functions (lambda (f) (with-selected-frame f (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font Mono-13"))))) (set-face-attribute 'font-lock-comment-face nil :slant 'italic)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-screen t)
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode 1)


;; turn off bell
(setq visible-bell t)
(setq ring-bell-function 'ignore)

(setq make-backup-files nil auto-save-default nil auto-save-list-file-prefix nil create-lockfiles nil)

(use-package doom-themes
  :config (load-theme 'doom-one t))

(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom (doom-modeline-height 15))



;; --------------------------------
;; Evil + General + Which-key
;; --------------------------------
(use-package evil
  :init (setq evil-want-keybinding nil)
  :config (evil-mode 1))

(use-package evil-collection
  :after evil
  :config (evil-collection-init))

(use-package which-key
  :init (which-key-mode 1)
  :custom
  (which-key-idle-delay 0.3)
  (which-key-idle-secondary-delay 0.05)
  (which-key-max-description-length 40)
  (which-key-min-display-lines 10)
  (which-key-side-window-location 'bottom))


(use-package general
  :config
  (general-create-definer my/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  ;; File operations
  (my/leader-keys
    "f"  '(:ignore t :which-key "file")
    "ff" '(find-file :which-key "find file")
    "fs" '(save-buffer :which-key "save file")
    "fr" '(recentf-open-files :which-key "recent files"))

  ;; Buffer management
  (my/leader-keys
    "b"  '(:ignore t :which-key "buffer")
    "bb" '(switch-to-buffer :which-key "switch buffer")
    "bk" (lambda () (interactive) (kill-this-buffer))
    "bn" '(next-buffer :which-key "next buffer")
    "bp" '(previous-buffer :which-key "previous buffer"))

  ;; Project (projectile)
  (my/leader-keys
    "p"  '(:ignore t :which-key "project")
    "pf" '(projectile-find-file :which-key "find project file")
    "pp" '(projectile-switch-project :which-key "switch project")
    "ps" '(projectile-ripgrep :which-key "search in project"))

  ;; Compilation / Running apps
  (my/leader-keys
    "c"  '(:ignore t :which-key "compile/run")
    "cc" '(compile :which-key "compile project")
    "cr" '(recompile :which-key "recompile last")
    "cm" '(projectile-compile-project :which-key "project compile")
    "cx" '(async-shell-command :which-key "run shell command"))

  ;; Git / Magit
  (my/leader-keys
    "g"  '(:ignore t :which-key "git")
    "gs" '(magit-status :which-key "status")
    "gc" '(magit-commit :which-key "commit")
    "gp" '(magit-push-current :which-key "push")
    "gl" '(magit-log :which-key "log"))

  ;; ================================
  ;; Navigation: Jump to Definitions
  ;; ================================
  ;; Use xref for jumping; works with LSP, etags, and many modes
  (my/leader-keys
    "j"  '(:ignore t :which-key "jump")
    "jd" '(xref-find-definitions :which-key "go to definition")
    "jr" '(xref-find-references  :which-key "find references")
    "jb" '(xref-pop-marker-stack :which-key "back"))

  ;; Optional: if you use lsp-mode, you can prefer LSP UI peek:
  ;; (my/leader-keys
  ;;   "jD" '(lsp-ui-peek-find-definitions :which-key "peek definitions")
  ;;   "jR" '(lsp-ui-peek-find-references  :which-key "peek references"))

  ;; ============================================
  ;; Diagnostics: Walk through errors (Flymake)
  ;; ============================================
  ;; Flymake is built-in and shows diagnostics from various backends (incl. LSP)
  ;; SPC e n/p to navigate, SPC e l to open list in a separate buffer,
  ;; SPC e m to show messages for line/error in minibuffer.
  (my/leader-keys
    "e"   '(:ignore t :which-key "errors/diagnostics")
    "en"  '(flymake-goto-next-error :which-key "next error")
    "ep"  '(flymake-goto-prev-error :which-key "prev error")
    "el"  '(flymake-show-buffer-diagnostics :which-key "list buffer errors")
    "eL"  '(flymake-show-project-diagnostics :which-key "list project errors")
    "em"  '(flymake-show-diagnostics-at-point :which-key "error at point"))

  ;; If you prefer Flycheck instead of Flymake, uncomment these and ensure flycheck is enabled:
  ;; (my/leader-keys
  ;;   "e"  '(:ignore t :which-key "errors/diagnostics")
  ;;   "en" '(flycheck-next-error :which-key "next error")
  ;;   "ep" '(flycheck-previous-error :which-key "prev error")
  ;;   "el" '(flycheck-list-errors :which-key "list errors"))

  ;; Mini-buffer centric quick list options (optional):
  ;; - With Embark+Consult:
  ;; (my/leader-keys
  ;;   "ee" '(consult-flymake :which-key "errors (minibuffer)"))
  ;; This gives a live minibuffer error list with filtering and quick navigation.
)

;; --------------------------------
;; Completion stack (Corfu + Orderless + Yasnippet)
;; --------------------------------

(use-package envrc :init (envrc-global-mode))
(use-package corfu
  :init (global-corfu-mode)
  :custom
  (corfu-auto t)
  (corfu-auto-delay 0.0)
  (corfu-auto-prefix 1)
  (corfu-preview-current nil)
  (corfu-preselect 'prompt))

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package yasnippet
  :config (yas-global-mode 1))

;; --------------------------------
;; LSP + Flycheck
;; --------------------------------
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook ((go-mode . lsp-deferred)
         (nix-mode . lsp-deferred)
         (web-mode . lsp-deferred)
         (typescript-mode . lsp-deferred))
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (setq lsp-enable-snippet t
        lsp-enable-symbol-highlighting t
        lsp-headerline-breadcrumb-enable nil
        lsp-idle-delay 0.2
        read-process-output-max (* 3 1024 1024))
  ;; integrate LSP completion with Corfu
  (setq lsp-completion-provider :none)
  (add-hook 'lsp-completion-mode-hook
            (lambda ()
              (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
                    '(orderless)))))

(use-package lsp-ui :after lsp-mode)

(use-package flycheck
  :hook (lsp-mode . flycheck-mode))


;; Optional: CAPE integration
(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-file))

;; --------------------------------
;; Languages
;; --------------------------------
(use-package go-mode)
(use-package nix-mode)
(use-package web-mode
  :mode "\\.html?\\'")
(use-package typescript-mode)

;; --------------------------------
;; Other goodies
;; --------------------------------
(use-package magit)
(use-package projectile
  :init (projectile-mode 1)
  :custom
  (projectile-indexing-method 'alien)
  (projectile-enable-caching t)
  (projectile-project-search-path '("~/code" "~/work"))
  (projectile-globally-ignored-directories '(".git" ".direnv" "node_modules" "dist" "target"))
  (projectile-generic-command "rg --files --hidden --follow -g !.git -g !.direnv"))

(use-package consult)
(use-package consult-dir)
(use-package avy)
(use-package multiple-cursors)

(use-package dashboard
  :init
  (setq inhibit-startup-screen t
        dashboard-startup-banner 'logo
        dashboard-banner-logo-title "Welcome back"
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-center-content t
        dashboard-show-shortcuts t
        dashboard-items '((recents . 5)
                          (projects . 5))
        dashboard-image-banner-max-height 200
        dashboard-image-banner-max-width 400)
  :config
  ;; Only set the image if the file exists
  (let ((img-path (expand-file-name "~/nixflakes/config/emacs/dashboard.png")))
    (when (file-exists-p img-path)
      (setq dashboard-banner-logo-png img-path)))

  ;; Properly create dashboard at startup
  (dashboard-setup-startup-hook)

  ;; Make dashboard the initial buffer (after itâ€™s created)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))


(provide 'init)
;;; init.el ends here
